/*

Triangle, pentagonal, and hexagonal numbers are generated by the following formulae:

Triangle	 	Tn=n(n+1)/2	 	1, 3, 6, 10, 15, ...
Pentagonal	 	Pn=n(3n−1)/2	 	1, 5, 12, 22, 35, ...
Hexagonal	 	Hn=n(2n−1)	 	1, 6, 15, 28, 45, ...
It can be verified that T285 = P165 = H143 = 40755.

Find the next triangle number that is also pentagonal and hexagonal.

*/

function generateTriangleSet(num) {
    const dataT = new Set();
    for (let i = 1; i <= num; i++) {
        dataT.add(i * (i + 1) / 2);
    }
    return dataT;
}

function generatePentagonalSet(num) {
    const dataP = new Set();
    for (let i = 1; i <= num; i++) {
        dataP.add(i * (3 * i - 1) / 2);
    }
    return dataP;
}

function generateHexagonalSet(num) {
    const dataH = new Set();
    for (let i = 1; i <= num; i++) {
        dataH.add(i * (2 * i - 1));
    }
    return dataH;
}


function check(){
    const limit = 100000;
    const tSet = generateTriangleSet(limit);
    const pSet = generatePentagonalSet(limit);
    const hSet = generateHexagonalSet(limit);

    for(const num of tSet){
        if(num > 40755 && pSet.has(num) && hSet.has(num)){
            return num;
        }
    }
}

//console.log(check());


///////////// 2 ///////////////

////// Quadratic Formula //////

function isTriangle(num) {
    const n = (-1 + Math.sqrt(1 + 8 * num)) / 2;
    return Number.isInteger(n);
}

function isPentagonal(num) {
    const n = (1 + Math.sqrt(1 + 24 * num)) / 6;
    return Number.isInteger(n);
}


function checkNextTriPenHex(){
    let n = 144;
    let hexagonalNumber;

    while(true){
        hexagonalNumber = n * (2 * n - 1);

        if(isTriangle(hexagonalNumber) && isPentagonal(hexagonalNumber)){
            break;
        }

        n++;

    }
    return hexagonalNumber;
}

console.log(checkNextTriPenHex());
